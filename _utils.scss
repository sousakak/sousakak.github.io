/************************************************************************************
░██████╗████████╗██╗░░░██╗██╗░░░░░███████╗░██████╗░░░░██████╗░█████╗░░██████╗░██████╗
██╔════╝╚══██╔══╝╚██╗░██╔╝██║░░░░░██╔════╝██╔════╝░░░██╔════╝██╔══██╗██╔════╝██╔════╝
╚█████╗░░░░██║░░░░╚████╔╝░██║░░░░░█████╗░░╚█████╗░░░░╚█████╗░██║░░╚═╝╚█████╗░╚█████╗░
░╚═══██╗░░░██║░░░░░╚██╔╝░░██║░░░░░██╔══╝░░░╚═══██╗░░░░╚═══██╗██║░░██╗░╚═══██╗░╚═══██╗
██████╔╝░░░██║░░░░░░██║░░░███████╗███████╗██████╔╝██╗██████╔╝╚█████╔╝██████╔╝██████╔╝
╚═════╝░░░░╚═╝░░░░░░╚═╝░░░╚══════╝╚══════╝╚═════╝░╚═╝╚═════╝░░╚════╝░╚═════╝░╚═════╝░
************************************************************************************/
@charset "UTF-8";
@use "sass:map";
@use "sass:meta";

/* meta functions */
@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }
    @return $number;
}

@function rem($px, $base: 16) {
    @return calc($px / $base * 1rem);
}

/* fonts */
@import url('https://fonts.googleapis.com/css?family=M+PLUS+Rounded+1c');
@import url('https://fonts.googleapis.com/css?family=Sawarabi+Gothic');
@import url('https://fonts.googleapis.com/css?family=Sacramento');
@import url('https://fonts.googleapis.com/css?family=Klee+One');
@font-face {
	font-family: 'Komorebi Gothic';
    font-style: normal;
	src: url(/fonts/komorebi-gothic.ttf);
}

$title-font: 'M PLUS Rounded 1c', sans-serif;
$content-font: 'Komorebi Gothic', 'Sawarabi Gothic', sans-serif;
$alphabet-font: 'Klee+One';
$cursive-font: 'Sacramento', cursive;

$font-size: (
    title: 3rem,
    text: 1rem
);
@function fontsize($type) {
    @return map.get($font-size, $type);
}

/* colors */
$colors: (
    normal: (
        base-color: #6fa5ff,
        main-color: #3039c9,
        accent-color: #f640ff,
        shadow-color: #1f2687,
        white: #FFF,
        black: #000
    )
);

@function color($type, $page: normal, $default: map.get(map.get($colors, normal), base-color)) {
    @if map.has-key($colors, $page) {
        @if map.has-key(map.get($colors, $page), $type + "-color") {
            @return map.get(map.get($colors, $page), $type + "-color");
        } @else {
            @return $default;
        }
    } @else {
        @warn "specified unexpected page: " + $page;
        @return $default;
    }
}

/* images */
$image-mt-kuruma: url(Mount_Kuruma.jpg);

/* layouts */
@mixin orientation($reverse: false) {
    @if $reverse {
        @media (orientation: landscape) {
            flex-direction: column;
        }
        @media (orientation: portrait) {
            flex-direction: row;
        }
    } @else {
        @media (orientation: landscape) {
            flex-direction: row;
        }
        @media (orientation: portrait) {
            flex-direction: column;
        }
    }
}

.background {
    position: fixed;
    width: 100vw;
    height: 100vh;
    overflow: hidden;
}

.full-screen {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    height: 80vh;
    width: 80vw;
    margin: auto;
}

/* components */
$components: (
    "card": (
        border-color: rgba(color(white), 0.2),
        border-style: solid,
        border-width: 1px,
    )
);
$config: null !default;
@function getConfig($property, $component: null) {
    @if meta.global-variable-exists("components") {
        @if $config == null {
            @if $component {
                $config: map.get($components, $component);
            } @else {
                @error 'Component not specified';
                @return null;
            }
        }
        @if $component {
            @return map.get($components, $component, $property);
        } @else {
            @return map.get($config, $property);
        }
    } @else {
        @error 'The "components" variable not defined';
    }
}

.card {
    $config: map.get($components, card);
    padding: 0.75em;
    border-radius: 10px;
    border: getConfig(border-color, "card") getConfig(border-style, "card") getConfig(border-style, "card");
    background: rgba(207, 207, 207, 0.3);
    box-shadow: 0 8px 32px 0 rgba(color(shadow), 0.37);
    backdrop-filter: blur(3px);
    -webkit-backdrop-filter: blur(3px);
    &-title {
        &-box {
            display: flex;
            height: 100%;
            align-items: flex-end;
            align-content: center;
            text-align: center;
            justify-content: center;
            flex-wrap: wrap;
            @include orientation(true);
        }
        &-text {
            font-family: $title-font;
            font-size: fontsize(title);
        }
        &-sub {
            font-size: fontsize(text);
        }
        &-helper {
            align-self: center;
        }
        &-icon {
            width: 1.5em;
            height: 1.5em;
        }
    }
}

.loading {
}

/* effects */
@mixin rotate($name) {
    @keyframes #{$name} {
        0% {
            transform: rotate(0deg);
            @content;
        }
        100% {
            transform: rotate(360deg);
            @content;
        }
    }
}

/* events */
@mixin hover($ie: false) {
    &:focus {
        @content;
    }
    
    @media (hover: hover) and (pointer: fine) {
        &:hover {
            @content;
        }
    }

    @if $ie {
        @at-root .ua-ie &:hover {
            @content;
        }
    }
}

/* Others */
::selection {
    background-color: rgba(152, 251, 152, 0.3);
    color: rgb(0, 128, 128);
}

*[class^="en-"] {
    display: none;
}
